// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.38.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value
)]

// Section: imports

use crate::api::aiscript::api::*;
use crate::api::aiscript::ui::*;
use crate::api::aiscript::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.38";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -463493403;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__aiscript__AiScript_abort_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AiScript_abort",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AiScript>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    let mut api_that_decoded = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_decoded = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that = &*api_that_decoded.unwrap();
                    Result::<_, ()>::Ok({
                        crate::api::aiscript::AiScript::abort(api_that);
                    })
                })())
            }
        },
    )
}
fn wire__crate__api__aiscript__AiScript_exec_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AiScript_exec",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AiScript>,
            >>::sse_decode(&mut deserializer);
            let api_input = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::api::aiscript::AiScript::exec(api_that, &api_input).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__aiscript__AiScript_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AiScript_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_read = decode_DartFn_Inputs_String_Output_String_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_write = decode_DartFn_Inputs_String_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_api = <Option<AsApiLib>>::sse_decode(&mut deserializer);
            let api_ui = <Option<AsUiLib>>::sse_decode(&mut deserializer);
            let api_play =
                <Option<crate::api::aiscript::play::AsPlayLib>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::aiscript::AiScript::new(
                                api_read, api_write, api_api, api_ui, api_play,
                            )
                            .await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__aiscript__api__AsApiLib_new_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "AsApiLib_new", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user_id = <Option<String>>::sse_decode(&mut deserializer);
let api_user_name = <Option<String>>::sse_decode(&mut deserializer);
let api_user_username = <Option<String>>::sse_decode(&mut deserializer);
let api_custom_emojis = <String>::sse_decode(&mut deserializer);
let api_locale = <String>::sse_decode(&mut deserializer);
let api_server_url = <String>::sse_decode(&mut deserializer);
let api_dialog = decode_DartFn_Inputs_String_String_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));
let api_confirm = decode_DartFn_Inputs_String_String_String_Output_bool_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));
let api_token = <Option<String>>::sse_decode(&mut deserializer);
let api_api = decode_DartFn_Inputs_String_String_opt_String_Output_record_string_opt_string_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));
let api_save = decode_DartFn_Inputs_String_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));
let api_load = decode_DartFn_Inputs_String_Output_String_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));
let api_url = <String>::sse_decode(&mut deserializer);
let api_nyaize = decode_DartFn_Inputs_String_Output_String_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::aiscript::api::AsApiLib::new(api_user_id, api_user_name, api_user_username, api_custom_emojis, api_locale, api_server_url, api_dialog, api_confirm, api_token, api_api, api_save, api_load, api_url, api_nyaize))
                })()) })
}
fn wire__crate__api__aiscript__ui__AsUiButtonCallback_call_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AsUiButtonCallback_call",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiButtonCallback>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::api::aiscript::ui::AsUiButtonCallback::call(api_that).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__aiscript__ui__AsUiLib_new_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AsUiLib_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_on_update =
                decode_DartFn_Inputs_String_as_ui_component_Output_unit_AnyhowException(
                    <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
                );
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(crate::api::aiscript::ui::AsUiLib::new(api_on_update))
            })())
        },
    )
}
fn wire__crate__api__aiscript__ui__AsUiMfmCallback_call_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AsUiMfmCallback_call",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiMfmCallback>,
            >>::sse_decode(&mut deserializer);
            let api_value = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::api::aiscript::ui::AsUiMfmCallback::call(api_that, api_value).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__aiscript__ui__AsUiNumberCallback_call_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AsUiNumberCallback_call",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiNumberCallback>,
            >>::sse_decode(&mut deserializer);
            let api_value = <f64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::api::aiscript::ui::AsUiNumberCallback::call(api_that, api_value)
                            .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__aiscript__ui__AsUiSelectCallback_call_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AsUiSelectCallback_call",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSelectCallback>,
            >>::sse_decode(&mut deserializer);
            let api_value = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::api::aiscript::ui::AsUiSelectCallback::call(api_that, api_value)
                            .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__aiscript__ui__AsUiSwitchCallback_call_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AsUiSwitchCallback_call",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSwitchCallback>,
            >>::sse_decode(&mut deserializer);
            let api_value = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::api::aiscript::ui::AsUiSwitchCallback::call(api_that, api_value)
                            .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__aiscript__ui__AsUiTextInputCallback_call_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AsUiTextInputCallback_call",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextInputCallback>,
            >>::sse_decode(&mut deserializer);
            let api_value = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::api::aiscript::ui::AsUiTextInputCallback::call(api_that, api_value)
                            .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__aiscript__ui__AsUiTextareaCallback_call_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AsUiTextareaCallback_call",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextareaCallback>,
            >>::sse_decode(&mut deserializer);
            let api_value = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::api::aiscript::ui::AsUiTextareaCallback::call(api_that, api_value)
                            .await
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: related_funcs

fn decode_DartFn_Inputs_String_Output_String_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<String> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> String {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<String>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_String_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> () {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_String_String_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String, String) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String, arg1: String) -> () {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String, arg1: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
            arg1,
        ))
    }
}
fn decode_DartFn_Inputs_String_String_String_Output_bool_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String, String, String) -> flutter_rust_bridge::DartFnFuture<bool> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: String,
        arg1: String,
        arg2: String,
    ) -> bool {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
            arg2.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<bool>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String, arg1: String, arg2: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
            arg1,
            arg2,
        ))
    }
}
fn decode_DartFn_Inputs_String_String_String_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String, String, String) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: String,
        arg1: String,
        arg2: String,
    ) -> () {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
            arg2.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String, arg1: String, arg2: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
            arg1,
            arg2,
        ))
    }
}
fn decode_DartFn_Inputs_String_String_opt_String_Output_record_string_opt_string_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String, String, Option<String>) -> flutter_rust_bridge::DartFnFuture<(String, Option<String>)>
{
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: String,
        arg1: String,
        arg2: Option<String>,
    ) -> (String, Option<String>) {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
            arg2.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<(String, Option<String>)>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String, arg1: String, arg2: Option<String>| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
            arg1,
            arg2,
        ))
    }
}
fn decode_DartFn_Inputs_String_as_ui_component_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String, crate::api::aiscript::ui::AsUiComponent) -> flutter_rust_bridge::DartFnFuture<()>
{
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: String,
        arg1: crate::api::aiscript::ui::AsUiComponent,
    ) -> () {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String, arg1: crate::api::aiscript::ui::AsUiComponent| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
            arg1,
        ))
    }
}
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AiScript>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsApiLib>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiButtonCallback>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiLib>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiMfmCallback>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiNumberCallback>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSelectCallback>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSwitchCallback>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextInputCallback>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextareaCallback>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for AiScript {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AiScript>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for AsApiLib {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsApiLib>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for AsUiButtonCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiButtonCallback>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for AsUiLib {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiLib>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for AsUiMfmCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiMfmCallback>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for AsUiNumberCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiNumberCallback>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for AsUiSelectCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSelectCallback>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for AsUiSwitchCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSwitchCallback>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for AsUiTextInputCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextInputCallback>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for AsUiTextareaCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextareaCallback>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AiScript>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsApiLib>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiButtonCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiLib>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiMfmCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiNumberCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSelectCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSwitchCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextInputCallback>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextareaCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::aiscript::play::AsPlayLib {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_thisId = <String>::sse_decode(deserializer);
        let mut var_thisUrl = <String>::sse_decode(deserializer);
        return crate::api::aiscript::play::AsPlayLib {
            this_id: var_thisId,
            this_url: var_thisUrl,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiButton {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_text = <Option<String>>::sse_decode(deserializer);
        let mut var_onClick = <Option<AsUiButtonCallback>>::sse_decode(deserializer);
        let mut var_primary = <Option<bool>>::sse_decode(deserializer);
        let mut var_rounded = <Option<bool>>::sse_decode(deserializer);
        let mut var_disabled = <Option<bool>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiButton {
            text: var_text,
            on_click: var_onClick,
            primary: var_primary,
            rounded: var_rounded,
            disabled: var_disabled,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiButtons {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_buttons =
            <Option<Vec<crate::api::aiscript::ui::AsUiButton>>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiButtons {
            buttons: var_buttons,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiComponent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::aiscript::ui::AsUiRoot>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::Root(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiContainer>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::Container(var_field0);
            }
            2 => {
                let mut var_field0 = <crate::api::aiscript::ui::AsUiText>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::Text(var_field0);
            }
            3 => {
                let mut var_field0 = <crate::api::aiscript::ui::AsUiMfm>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::Mfm(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiButton>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::Button(var_field0);
            }
            5 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiButtons>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::Buttons(var_field0);
            }
            6 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiSwitch>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::ToggleSwitch(var_field0);
            }
            7 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiTextarea>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::Textarea(var_field0);
            }
            8 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiTextInput>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::TextInput(var_field0);
            }
            9 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiNumberInput>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::NumberInput(var_field0);
            }
            10 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiSelect>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::Select(var_field0);
            }
            11 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiFolder>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::Folder(var_field0);
            }
            12 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiPostFormButton>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::PostFormButton(var_field0);
            }
            13 => {
                let mut var_field0 =
                    <crate::api::aiscript::ui::AsUiPostForm>::sse_decode(deserializer);
                return crate::api::aiscript::ui::AsUiComponent::PostForm(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiContainer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_children = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_align = <Option<String>>::sse_decode(deserializer);
        let mut var_bgColor = <Option<String>>::sse_decode(deserializer);
        let mut var_fgColor = <Option<String>>::sse_decode(deserializer);
        let mut var_font = <Option<String>>::sse_decode(deserializer);
        let mut var_borderWidth = <Option<f64>>::sse_decode(deserializer);
        let mut var_borderColor = <Option<String>>::sse_decode(deserializer);
        let mut var_padding = <Option<f64>>::sse_decode(deserializer);
        let mut var_rounded = <Option<bool>>::sse_decode(deserializer);
        let mut var_hidden = <Option<bool>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiContainer {
            children: var_children,
            align: var_align,
            bg_color: var_bgColor,
            fg_color: var_fgColor,
            font: var_font,
            border_width: var_borderWidth,
            border_color: var_borderColor,
            padding: var_padding,
            rounded: var_rounded,
            hidden: var_hidden,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiFolder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_children = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_title = <Option<String>>::sse_decode(deserializer);
        let mut var_opened = <Option<bool>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiFolder {
            children: var_children,
            title: var_title,
            opened: var_opened,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiMfm {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_text = <Option<String>>::sse_decode(deserializer);
        let mut var_size = <Option<f64>>::sse_decode(deserializer);
        let mut var_bold = <Option<bool>>::sse_decode(deserializer);
        let mut var_color = <Option<String>>::sse_decode(deserializer);
        let mut var_font = <Option<String>>::sse_decode(deserializer);
        let mut var_onClickEv = <Option<AsUiMfmCallback>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiMfm {
            text: var_text,
            size: var_size,
            bold: var_bold,
            color: var_color,
            font: var_font,
            on_click_ev: var_onClickEv,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiNumberInput {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_onInput = <Option<AsUiNumberCallback>>::sse_decode(deserializer);
        let mut var_defaultValue = <Option<f64>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_caption = <Option<String>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiNumberInput {
            on_input: var_onInput,
            default_value: var_defaultValue,
            label: var_label,
            caption: var_caption,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiPostForm {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_form =
            <Option<crate::api::aiscript::ui::PostFormPropsForAsUi>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiPostForm { form: var_form };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiPostFormButton {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_text = <Option<String>>::sse_decode(deserializer);
        let mut var_primary = <Option<bool>>::sse_decode(deserializer);
        let mut var_rounded = <Option<bool>>::sse_decode(deserializer);
        let mut var_form =
            <Option<crate::api::aiscript::ui::PostFormPropsForAsUi>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiPostFormButton {
            text: var_text,
            primary: var_primary,
            rounded: var_rounded,
            form: var_form,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiRoot {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_children = <Vec<String>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiRoot {
            children: var_children,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiSelect {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_items = <Option<Vec<(String, String)>>>::sse_decode(deserializer);
        let mut var_onChange = <Option<AsUiSelectCallback>>::sse_decode(deserializer);
        let mut var_defaultValue = <Option<String>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_caption = <Option<String>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiSelect {
            items: var_items,
            on_change: var_onChange,
            default_value: var_defaultValue,
            label: var_label,
            caption: var_caption,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiSwitch {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_onChange = <Option<AsUiSwitchCallback>>::sse_decode(deserializer);
        let mut var_defaultValue = <Option<bool>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_caption = <Option<String>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiSwitch {
            on_change: var_onChange,
            default_value: var_defaultValue,
            label: var_label,
            caption: var_caption,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiText {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_text = <Option<String>>::sse_decode(deserializer);
        let mut var_size = <Option<f64>>::sse_decode(deserializer);
        let mut var_bold = <Option<bool>>::sse_decode(deserializer);
        let mut var_color = <Option<String>>::sse_decode(deserializer);
        let mut var_font = <Option<String>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiText {
            text: var_text,
            size: var_size,
            bold: var_bold,
            color: var_color,
            font: var_font,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiTextInput {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_onInput = <Option<AsUiTextInputCallback>>::sse_decode(deserializer);
        let mut var_defaultValue = <Option<String>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_caption = <Option<String>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiTextInput {
            on_input: var_onInput,
            default_value: var_defaultValue,
            label: var_label,
            caption: var_caption,
        };
    }
}

impl SseDecode for crate::api::aiscript::ui::AsUiTextarea {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_onInput = <Option<AsUiTextareaCallback>>::sse_decode(deserializer);
        let mut var_defaultValue = <Option<String>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_caption = <Option<String>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::AsUiTextarea {
            on_input: var_onInput,
            default_value: var_defaultValue,
            label: var_label,
            caption: var_caption,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::aiscript::ui::AsUiButton> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::aiscript::ui::AsUiButton>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<AsApiLib> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<AsApiLib>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<AsUiButtonCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<AsUiButtonCallback>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<AsUiLib> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<AsUiLib>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<AsUiMfmCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<AsUiMfmCallback>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<AsUiNumberCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<AsUiNumberCallback>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<AsUiSelectCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<AsUiSelectCallback>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<AsUiSwitchCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<AsUiSwitchCallback>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<AsUiTextInputCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<AsUiTextInputCallback>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<AsUiTextareaCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<AsUiTextareaCallback>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::aiscript::play::AsPlayLib> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::aiscript::play::AsPlayLib>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::aiscript::ui::PostFormPropsForAsUi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::aiscript::ui::PostFormPropsForAsUi>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::aiscript::ui::AsUiButton>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::api::aiscript::ui::AsUiButton>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<(String, String)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<(String, String)>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::aiscript::ui::PostFormPropsForAsUi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_text = <String>::sse_decode(deserializer);
        let mut var_cw = <Option<String>>::sse_decode(deserializer);
        let mut var_visibility = <Option<String>>::sse_decode(deserializer);
        let mut var_localOnly = <Option<bool>>::sse_decode(deserializer);
        return crate::api::aiscript::ui::PostFormPropsForAsUi {
            text: var_text,
            cw: var_cw,
            visibility: var_visibility,
            local_only: var_localOnly,
        };
    }
}

impl SseDecode for (String, Option<String>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <Option<String>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__aiscript__AiScript_abort_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__aiscript__AiScript_exec_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__aiscript__AiScript_new_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__aiscript__ui__AsUiButtonCallback_call_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        7 => wire__crate__api__aiscript__ui__AsUiMfmCallback_call_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        8 => wire__crate__api__aiscript__ui__AsUiNumberCallback_call_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        9 => wire__crate__api__aiscript__ui__AsUiSelectCallback_call_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        10 => wire__crate__api__aiscript__ui__AsUiSwitchCallback_call_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        11 => wire__crate__api__aiscript__ui__AsUiTextInputCallback_call_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        12 => wire__crate__api__aiscript__ui__AsUiTextareaCallback_call_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        4 => wire__crate__api__aiscript__api__AsApiLib_new_impl(ptr, rust_vec_len, data_len),
        6 => wire__crate__api__aiscript__ui__AsUiLib_new_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<AiScript> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AiScript> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AiScript>> for AiScript {
    fn into_into_dart(self) -> FrbWrapper<AiScript> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<AsApiLib> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AsApiLib> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AsApiLib>> for AsApiLib {
    fn into_into_dart(self) -> FrbWrapper<AsApiLib> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<AsUiButtonCallback> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<AsUiButtonCallback>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AsUiButtonCallback>> for AsUiButtonCallback {
    fn into_into_dart(self) -> FrbWrapper<AsUiButtonCallback> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<AsUiLib> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AsUiLib> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AsUiLib>> for AsUiLib {
    fn into_into_dart(self) -> FrbWrapper<AsUiLib> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<AsUiMfmCallback> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AsUiMfmCallback> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AsUiMfmCallback>> for AsUiMfmCallback {
    fn into_into_dart(self) -> FrbWrapper<AsUiMfmCallback> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<AsUiNumberCallback> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<AsUiNumberCallback>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AsUiNumberCallback>> for AsUiNumberCallback {
    fn into_into_dart(self) -> FrbWrapper<AsUiNumberCallback> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<AsUiSelectCallback> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<AsUiSelectCallback>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AsUiSelectCallback>> for AsUiSelectCallback {
    fn into_into_dart(self) -> FrbWrapper<AsUiSelectCallback> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<AsUiSwitchCallback> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<AsUiSwitchCallback>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AsUiSwitchCallback>> for AsUiSwitchCallback {
    fn into_into_dart(self) -> FrbWrapper<AsUiSwitchCallback> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<AsUiTextInputCallback> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<AsUiTextInputCallback>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AsUiTextInputCallback>>
    for AsUiTextInputCallback
{
    fn into_into_dart(self) -> FrbWrapper<AsUiTextInputCallback> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<AsUiTextareaCallback> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<AsUiTextareaCallback>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AsUiTextareaCallback>> for AsUiTextareaCallback {
    fn into_into_dart(self) -> FrbWrapper<AsUiTextareaCallback> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::play::AsPlayLib {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.this_id.into_into_dart().into_dart(),
            self.this_url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::play::AsPlayLib
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::play::AsPlayLib>
    for crate::api::aiscript::play::AsPlayLib
{
    fn into_into_dart(self) -> crate::api::aiscript::play::AsPlayLib {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiButton {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.text.into_into_dart().into_dart(),
            self.on_click.into_into_dart().into_dart(),
            self.primary.into_into_dart().into_dart(),
            self.rounded.into_into_dart().into_dart(),
            self.disabled.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiButton
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiButton>
    for crate::api::aiscript::ui::AsUiButton
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiButton {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiButtons {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.buttons.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiButtons
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiButtons>
    for crate::api::aiscript::ui::AsUiButtons
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiButtons {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiComponent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::aiscript::ui::AsUiComponent::Root(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::Container(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::Text(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::Mfm(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::Button(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::Buttons(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::ToggleSwitch(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::Textarea(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::TextInput(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::NumberInput(field0) => {
                [9.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::Select(field0) => {
                [10.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::Folder(field0) => {
                [11.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::PostFormButton(field0) => {
                [12.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::aiscript::ui::AsUiComponent::PostForm(field0) => {
                [13.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiComponent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiComponent>
    for crate::api::aiscript::ui::AsUiComponent
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiComponent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiContainer {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.children.into_into_dart().into_dart(),
            self.align.into_into_dart().into_dart(),
            self.bg_color.into_into_dart().into_dart(),
            self.fg_color.into_into_dart().into_dart(),
            self.font.into_into_dart().into_dart(),
            self.border_width.into_into_dart().into_dart(),
            self.border_color.into_into_dart().into_dart(),
            self.padding.into_into_dart().into_dart(),
            self.rounded.into_into_dart().into_dart(),
            self.hidden.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiContainer
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiContainer>
    for crate::api::aiscript::ui::AsUiContainer
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiContainer {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiFolder {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.children.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.opened.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiFolder
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiFolder>
    for crate::api::aiscript::ui::AsUiFolder
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiFolder {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiMfm {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.text.into_into_dart().into_dart(),
            self.size.into_into_dart().into_dart(),
            self.bold.into_into_dart().into_dart(),
            self.color.into_into_dart().into_dart(),
            self.font.into_into_dart().into_dart(),
            self.on_click_ev.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiMfm
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiMfm>
    for crate::api::aiscript::ui::AsUiMfm
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiMfm {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiNumberInput {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.on_input.into_into_dart().into_dart(),
            self.default_value.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.caption.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiNumberInput
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiNumberInput>
    for crate::api::aiscript::ui::AsUiNumberInput
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiNumberInput {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiPostForm {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.form.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiPostForm
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiPostForm>
    for crate::api::aiscript::ui::AsUiPostForm
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiPostForm {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiPostFormButton {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.text.into_into_dart().into_dart(),
            self.primary.into_into_dart().into_dart(),
            self.rounded.into_into_dart().into_dart(),
            self.form.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiPostFormButton
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiPostFormButton>
    for crate::api::aiscript::ui::AsUiPostFormButton
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiPostFormButton {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiRoot {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.children.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiRoot
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiRoot>
    for crate::api::aiscript::ui::AsUiRoot
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiRoot {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiSelect {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.items.into_into_dart().into_dart(),
            self.on_change.into_into_dart().into_dart(),
            self.default_value.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.caption.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiSelect
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiSelect>
    for crate::api::aiscript::ui::AsUiSelect
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiSelect {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiSwitch {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.on_change.into_into_dart().into_dart(),
            self.default_value.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.caption.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiSwitch
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiSwitch>
    for crate::api::aiscript::ui::AsUiSwitch
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiSwitch {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiText {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.text.into_into_dart().into_dart(),
            self.size.into_into_dart().into_dart(),
            self.bold.into_into_dart().into_dart(),
            self.color.into_into_dart().into_dart(),
            self.font.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiText
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiText>
    for crate::api::aiscript::ui::AsUiText
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiText {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiTextInput {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.on_input.into_into_dart().into_dart(),
            self.default_value.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.caption.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiTextInput
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiTextInput>
    for crate::api::aiscript::ui::AsUiTextInput
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiTextInput {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::AsUiTextarea {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.on_input.into_into_dart().into_dart(),
            self.default_value.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.caption.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::AsUiTextarea
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::AsUiTextarea>
    for crate::api::aiscript::ui::AsUiTextarea
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::AsUiTextarea {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::aiscript::ui::PostFormPropsForAsUi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.text.into_into_dart().into_dart(),
            self.cw.into_into_dart().into_dart(),
            self.visibility.into_into_dart().into_dart(),
            self.local_only.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::aiscript::ui::PostFormPropsForAsUi
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::aiscript::ui::PostFormPropsForAsUi>
    for crate::api::aiscript::ui::PostFormPropsForAsUi
{
    fn into_into_dart(self) -> crate::api::aiscript::ui::PostFormPropsForAsUi {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for AiScript {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AiScript>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for AsApiLib {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsApiLib>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for AsUiButtonCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiButtonCallback>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for AsUiLib {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiLib>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for AsUiMfmCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiMfmCallback>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for AsUiNumberCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiNumberCallback>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for AsUiSelectCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSelectCallback>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for AsUiSwitchCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSwitchCallback>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for AsUiTextInputCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextInputCallback>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for AsUiTextareaCallback {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextareaCallback>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AiScript>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsApiLib>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiButtonCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiLib>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiMfmCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiNumberCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSelectCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiSwitchCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextInputCallback>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AsUiTextareaCallback>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::aiscript::play::AsPlayLib {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.this_id, serializer);
        <String>::sse_encode(self.this_url, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiButton {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<AsUiButtonCallback>>::sse_encode(self.on_click, serializer);
        <Option<bool>>::sse_encode(self.primary, serializer);
        <Option<bool>>::sse_encode(self.rounded, serializer);
        <Option<bool>>::sse_encode(self.disabled, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiButtons {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<crate::api::aiscript::ui::AsUiButton>>>::sse_encode(self.buttons, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiComponent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::aiscript::ui::AsUiComponent::Root(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::aiscript::ui::AsUiRoot>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::Container(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::aiscript::ui::AsUiContainer>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::Text(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::aiscript::ui::AsUiText>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::Mfm(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::aiscript::ui::AsUiMfm>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::Button(field0) => {
                <i32>::sse_encode(4, serializer);
                <crate::api::aiscript::ui::AsUiButton>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::Buttons(field0) => {
                <i32>::sse_encode(5, serializer);
                <crate::api::aiscript::ui::AsUiButtons>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::ToggleSwitch(field0) => {
                <i32>::sse_encode(6, serializer);
                <crate::api::aiscript::ui::AsUiSwitch>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::Textarea(field0) => {
                <i32>::sse_encode(7, serializer);
                <crate::api::aiscript::ui::AsUiTextarea>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::TextInput(field0) => {
                <i32>::sse_encode(8, serializer);
                <crate::api::aiscript::ui::AsUiTextInput>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::NumberInput(field0) => {
                <i32>::sse_encode(9, serializer);
                <crate::api::aiscript::ui::AsUiNumberInput>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::Select(field0) => {
                <i32>::sse_encode(10, serializer);
                <crate::api::aiscript::ui::AsUiSelect>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::Folder(field0) => {
                <i32>::sse_encode(11, serializer);
                <crate::api::aiscript::ui::AsUiFolder>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::PostFormButton(field0) => {
                <i32>::sse_encode(12, serializer);
                <crate::api::aiscript::ui::AsUiPostFormButton>::sse_encode(field0, serializer);
            }
            crate::api::aiscript::ui::AsUiComponent::PostForm(field0) => {
                <i32>::sse_encode(13, serializer);
                <crate::api::aiscript::ui::AsUiPostForm>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiContainer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<String>>>::sse_encode(self.children, serializer);
        <Option<String>>::sse_encode(self.align, serializer);
        <Option<String>>::sse_encode(self.bg_color, serializer);
        <Option<String>>::sse_encode(self.fg_color, serializer);
        <Option<String>>::sse_encode(self.font, serializer);
        <Option<f64>>::sse_encode(self.border_width, serializer);
        <Option<String>>::sse_encode(self.border_color, serializer);
        <Option<f64>>::sse_encode(self.padding, serializer);
        <Option<bool>>::sse_encode(self.rounded, serializer);
        <Option<bool>>::sse_encode(self.hidden, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiFolder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<String>>>::sse_encode(self.children, serializer);
        <Option<String>>::sse_encode(self.title, serializer);
        <Option<bool>>::sse_encode(self.opened, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiMfm {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<f64>>::sse_encode(self.size, serializer);
        <Option<bool>>::sse_encode(self.bold, serializer);
        <Option<String>>::sse_encode(self.color, serializer);
        <Option<String>>::sse_encode(self.font, serializer);
        <Option<AsUiMfmCallback>>::sse_encode(self.on_click_ev, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiNumberInput {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<AsUiNumberCallback>>::sse_encode(self.on_input, serializer);
        <Option<f64>>::sse_encode(self.default_value, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.caption, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiPostForm {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::api::aiscript::ui::PostFormPropsForAsUi>>::sse_encode(self.form, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiPostFormButton {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<bool>>::sse_encode(self.primary, serializer);
        <Option<bool>>::sse_encode(self.rounded, serializer);
        <Option<crate::api::aiscript::ui::PostFormPropsForAsUi>>::sse_encode(self.form, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiRoot {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.children, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiSelect {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<(String, String)>>>::sse_encode(self.items, serializer);
        <Option<AsUiSelectCallback>>::sse_encode(self.on_change, serializer);
        <Option<String>>::sse_encode(self.default_value, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.caption, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiSwitch {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<AsUiSwitchCallback>>::sse_encode(self.on_change, serializer);
        <Option<bool>>::sse_encode(self.default_value, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.caption, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiText {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<f64>>::sse_encode(self.size, serializer);
        <Option<bool>>::sse_encode(self.bold, serializer);
        <Option<String>>::sse_encode(self.color, serializer);
        <Option<String>>::sse_encode(self.font, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiTextInput {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<AsUiTextInputCallback>>::sse_encode(self.on_input, serializer);
        <Option<String>>::sse_encode(self.default_value, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.caption, serializer);
    }
}

impl SseEncode for crate::api::aiscript::ui::AsUiTextarea {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<AsUiTextareaCallback>>::sse_encode(self.on_input, serializer);
        <Option<String>>::sse_encode(self.default_value, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.caption, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::aiscript::ui::AsUiButton> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::aiscript::ui::AsUiButton>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<AsApiLib> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <AsApiLib>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<AsUiButtonCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <AsUiButtonCallback>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<AsUiLib> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <AsUiLib>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<AsUiMfmCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <AsUiMfmCallback>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<AsUiNumberCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <AsUiNumberCallback>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<AsUiSelectCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <AsUiSelectCallback>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<AsUiSwitchCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <AsUiSwitchCallback>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<AsUiTextInputCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <AsUiTextInputCallback>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<AsUiTextareaCallback> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <AsUiTextareaCallback>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::aiscript::play::AsPlayLib> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::aiscript::play::AsPlayLib>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::aiscript::ui::PostFormPropsForAsUi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::aiscript::ui::PostFormPropsForAsUi>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::aiscript::ui::AsUiButton>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::aiscript::ui::AsUiButton>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<(String, String)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<(String, String)>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::aiscript::ui::PostFormPropsForAsUi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.text, serializer);
        <Option<String>>::sse_encode(self.cw, serializer);
        <Option<String>>::sse_encode(self.visibility, serializer);
        <Option<bool>>::sse_encode(self.local_only, serializer);
    }
}

impl SseEncode for (String, Option<String>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <Option<String>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
